<?php
 namespace Smarty; use Smarty\Resource\BasePlugin; use Smarty\Runtime\InheritanceRuntime; use Smarty\Template\Source; use Smarty\Template\Cached; use Smarty\Template\Compiled; use Smarty\Template\Config; #[\AllowDynamicProperties] class Template extends TemplateBase { public const CACHING_NOCACHE_CODE = 9999; private $compiled = null; private $cached = null; private $compiler = null; private $source = null; public $template_resource = null; public $templateId = null; public $startRenderCallbacks = []; public $endRenderCallbacks = []; private $left_delimiter = null; private $right_delimiter = null; private $inheritance; public function __construct( $template_resource, Smarty $smarty, ?\Smarty\Data $_parent = null, $_cache_id = null, $_compile_id = null, $_caching = null, $_isConfig = false ) { $this->smarty = $smarty; $this->cache_id = $_cache_id === null ? $this->smarty->cache_id : $_cache_id; $this->compile_id = $_compile_id === null ? $this->smarty->compile_id : $_compile_id; $this->caching = (int)($_caching === null ? $this->smarty->caching : $_caching); $this->cache_lifetime = $this->smarty->cache_lifetime; $this->compile_check = (int)$smarty->compile_check; $this->parent = $_parent; $this->template_resource = $template_resource; $this->source = $_isConfig ? Config::load($this) : Source::load($this); $this->compiled = Compiled::load($this); if ($smarty->security_policy) { $smarty->security_policy->registerCallBacks($this); } } private function render($no_output_filter = true, $display = null) { if ($this->smarty->debugging) { $this->smarty->getDebug()->start_template($this, $display); } if ($this->compile_check && !$this->getSource()->exists) { throw new Exception( "Unable to load '{$this->getSource()->type}:{$this->getSource()->name}'" . ($this->_isSubTpl() ? " in '{$this->parent->template_resource}'" : '') ); } if ($this->getSource()->handler->recompiled) { $this->caching = \Smarty\Smarty::CACHING_OFF; } foreach ($this->startRenderCallbacks as $callback) { call_user_func($callback, $this); } try { if ($this->caching === \Smarty\Smarty::CACHING_LIFETIME_CURRENT || $this->caching === \Smarty\Smarty::CACHING_LIFETIME_SAVED) { $this->getCached()->render($this, $no_output_filter); } else { $this->getCompiled()->render($this); } } finally { foreach ($this->endRenderCallbacks as $callback) { call_user_func($callback, $this); } } if ($display) { if ($this->caching && $this->smarty->cache_modified_check) { $this->smarty->cacheModifiedCheck( $this->getCached(), $this, isset($content) ? $content : ob_get_clean() ); } else { if ((!$this->caching || $this->getCached()->getNocacheCode() || $this->getSource()->handler->recompiled) && !$no_output_filter ) { echo $this->smarty->runOutputFilters(ob_get_clean(), $this); } else { echo ob_get_clean(); } } if ($this->smarty->debugging) { $this->smarty->getDebug()->end_template($this); $this->smarty->getDebug()->display_debug($this, true); } return ''; } else { if ($this->smarty->debugging) { $this->smarty->getDebug()->end_template($this); if ($this->smarty->debugging === 2 && $display === false) { $this->smarty->getDebug()->display_debug($this, true); } } if ( !$no_output_filter && (!$this->caching || $this->getCached()->getNocacheCode() || $this->getSource()->handler->recompiled) ) { return $this->smarty->runOutputFilters(ob_get_clean(), $this); } return null; } } public function renderSubTemplate( $template_name, $cache_id, $compile_id, $caching, $cache_lifetime, array $extra_vars = [], ?int $scope = null, ?string $currentDir = null ) { $name = $this->parseResourceName($template_name); if ($currentDir && preg_match('/^\.{1,2}\//', $name)) { $template_name = $currentDir . DIRECTORY_SEPARATOR . $name; } $tpl = $this->smarty->doCreateTemplate($template_name, $cache_id, $compile_id, $this, $caching, $cache_lifetime); $tpl->inheritance = $this->getInheritance(); if ($scope) { $tpl->defaultScope = $scope; } if ($caching) { if ($tpl->templateId !== $this->templateId && $caching !== \Smarty\Template::CACHING_NOCACHE_CODE) { $tpl->getCached(true); } else { $tpl->setCached($this->getCached()); } } foreach ($extra_vars as $_key => $_val) { $tpl->assign($_key, $_val); } if ($tpl->caching === \Smarty\Template::CACHING_NOCACHE_CODE) { if ($tpl->getCompiled()->getNocacheCode()) { $this->getCached()->hashes[$tpl->getCompiled()->nocache_hash] = true; } } $tpl->render(); } private function parseResourceName($resource_name): string { if (preg_match('/^([A-Za-z0-9_\-]{2,}):/', $resource_name, $match)) { return substr($resource_name, strlen($match[0])); } return $resource_name; } public function _isSubTpl() { return isset($this->parent) && $this->parent instanceof Template; } public function assign($tpl_var, $value = null, $nocache = false, $scope = null) { return parent::assign($tpl_var, $value, $nocache, $scope); } public function compileTemplateSource() { return $this->getCompiled()->compileAndWrite($this); } public function getCachedContent() { return $this->getCached()->getContent($this); } public function writeCachedContent($content) { if ($this->getSource()->handler->recompiled || !$this->caching ) { return false; } $codeframe = $this->createCodeFrame($content, '', true); return $this->getCached()->writeCache($this, $codeframe); } public function getTemplateId() { return $this->templateId; } public function capture_error() { throw new Exception("Not matching {capture} open/close in '{$this->template_resource}'"); } public function getCompiled($forceNew = false) { if ($forceNew || !isset($this->compiled)) { $this->compiled = Compiled::load($this); } return $this->compiled; } public function getCached($forceNew = false): Cached { if ($forceNew || !isset($this->cached)) { $cacheResource = $this->smarty->getCacheResource(); $this->cached = new Cached( $this->source, $cacheResource, $this->compile_id, $this->cache_id ); if ($this->isCachingEnabled()) { $cacheResource->populate($this->cached, $this); } else { $this->cached->setValid(false); } } return $this->cached; } private function isCachingEnabled(): bool { return $this->caching && !$this->getSource()->handler->recompiled; } public function getInheritance(): InheritanceRuntime { if (is_null($this->inheritance)) { $this->inheritance = clone $this->getSmarty()->getRuntime('Inheritance'); } return $this->inheritance; } public function setInheritance(InheritanceRuntime $inheritanceRuntime) { $this->inheritance = $inheritanceRuntime; } public function getCompiler() { if (!isset($this->compiler)) { $this->compiler = $this->getSource()->createCompiler(); } return $this->compiler; } public function createCodeFrame($content = '', $functions = '', $cache = false, ?\Smarty\Compiler\Template $compiler = null) { return $this->getCodeFrameCompiler()->create($content, $functions, $cache, $compiler); } public function __destruct() { if ($this->smarty->cache_locking && $this->getCached()->is_locked) { $this->getCached()->handler->releaseLock($this->smarty, $this->getCached()); } } public function mustCompile(): bool { if (!$this->getSource()->exists) { if ($this->_isSubTpl()) { $parent_resource = " in '{$this->parent->template_resource}'"; } else { $parent_resource = ''; } throw new Exception("Unable to load {$this->getSource()->type} '{$this->getSource()->name}'{$parent_resource}"); } return $this->smarty->force_compile || $this->getSource()->handler->recompiled || !$this->getCompiled()->exists || ($this->compile_check && $this->getCompiled()->getTimeStamp() < $this->getSource()->getTimeStamp()); } private function getCodeFrameCompiler(): Compiler\CodeFrame { return new \Smarty\Compiler\CodeFrame($this); } public function getLeftDelimiter() { return $this->left_delimiter ?? $this->getSmarty()->getLeftDelimiter(); } public function setLeftDelimiter($left_delimiter) { $this->left_delimiter = $left_delimiter; } public function getRightDelimiter() { return $this->right_delimiter ?? $this->getSmarty()->getRightDelimiter();; } public function setRightDelimiter($right_delimiter) { $this->right_delimiter = $right_delimiter; } public function getStreamVariable($variable) { trigger_error("Using stream variables (\`\{\$foo:bar\}\`)is deprecated.", E_USER_DEPRECATED); $_result = ''; $fp = fopen($variable, 'r+'); if ($fp) { while (!feof($fp) && ($current_line = fgets($fp)) !== false) { $_result .= $current_line; } fclose($fp); return $_result; } if ($this->getSmarty()->error_unassigned) { throw new Exception('Undefined stream variable "' . $variable . '"'); } return null; } public function configLoad($config_file, $sections = null) { $confObj = parent::configLoad($config_file, $sections); $this->getCompiled()->file_dependency[ $confObj->getSource()->uid ] = array($confObj->getSource()->getResourceName(), $confObj->getSource()->getTimeStamp(), $confObj->getSource()->type); return $confObj; } public function fetch() { $result = $this->_execute(0); return $result === null ? ob_get_clean() : $result; } public function display() { $this->_execute(1); } public function isCached(): bool { return (bool) $this->_execute(2); } private function _execute($function) { $smarty = $this->getSmarty(); $this->caching = (int)$this->caching; $level = ob_get_level(); try { $_smarty_old_error_level = isset($smarty->error_reporting) ? error_reporting($smarty->error_reporting) : null; if ($smarty->isMutingUndefinedOrNullWarnings()) { $errorHandler = new \Smarty\ErrorHandler(); $errorHandler->activate(); } if ($function === 2) { if ($this->caching) { $result = $this->getCached()->isCached($this); } else { return false; } } else { $this->pushStack(); ob_start(); $result = $this->render(false, $function); $this->popStack(); } if (isset($errorHandler)) { $errorHandler->deactivate(); } if (isset($_smarty_old_error_level)) { error_reporting($_smarty_old_error_level); } return $result; } catch (\Throwable $e) { while (ob_get_level() > $level) { ob_end_clean(); } if (isset($errorHandler)) { $errorHandler->deactivate(); } if (isset($_smarty_old_error_level)) { error_reporting($_smarty_old_error_level); } throw $e; } } public function getSource() { return $this->source; } public function setSource($source): void { $this->source = $source; } private function setCached(Cached $cached) { $this->cached = $cached; } public function setCompileId($compile_id) { parent::setCompileId($compile_id); $this->getCompiled(true); if ($this->caching) { $this->getCached(true); } } public function setCacheId($cache_id) { parent::setCacheId($cache_id); $this->getCached(true); } } 